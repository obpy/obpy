import os
import sys
import fnmatch
import subprocess


def getsyspath(path):
    return path.replace('/', os.sep)


platform = ARGUMENTS.get('OS', Platform())
panda_version = ARGUMENTS.get('PANDA_VERSION', '1.8.0')
sphinx = ARGUMENTS.get('SPHINX', 'sphinx-build')
sphinx_flags = ARGUMENTS.get('SPHINX_FLAGS', '-Nq')
sphinx_builder = ARGUMENTS.get('SPHINX_BUILDER', 'html')
built_doc_dir = ARGUMENTS.get('BUILT_DOC_DIR', getsyspath('build/docs'))

sphinx_cmd = '%s %s -b %s %s %s $SOURCE' % (sphinx, sphinx_flags, sphinx_builder, getsyspath('doc/source'), '/'.join([built_doc_dir, sphinx_builder]))
sphinx = Builder(action = sphinx_cmd, src_suffix = '.rst', suffix = '.html')

pytest = ARGUMENTS.get('PY_TEST', 'py.test')
pytest_flags = ARGUMENTS.get('PY_TEST_FLAGS', '-q')
pytest_cmd = '%s %s' % (pytest, pytest_flags)

vars = Variables('build-setup.conf', ARGUMENTS)
vars.Add('PYINSTALLER_DIR', '', 'pyinstaller-1.5.1')
vars.Add('PYINSTALLER_CONFIGURE', '', 'Configure.py')
vars.Add('PYINSTALLER_MAKESPEC', '', 'Makespec.py')
vars.Add('PYINSTALLER_BUILD', '', 'Build.py')

env = Environment()


def RunPyInstaller(target, source, env):

    python_executable = sys.executable
    pyinstaller = os.path.join(vars['PYINSTALLER_DIR'], vars['PYINSTALLER_BUILD'])

    pyinstaller_status = subprocess.call([python_executable,
                                          pyinstaller])

    return context.Result(bool(pyinstaller_status))


env.Append(BUILDERS = {'Sphinx' : sphinx, 'PyInstaller' : RunPyInstaller})
vars.Update(env)


def CheckPyModule(context, module):

    context.Message('Checking for Python module %s...' % module)

    result = True

    try:
        __import__(module)
    except ImportError:
        result = False

    context.Result(result)
    return result


def CheckPyInstaller(context):

    context.Message('Checking for PyInstaller...')

    result = False

    pyinstaller_directory = find_pyinstaller()
    if pyinstaller_directory is not None:

        env['PYINSTALLER_DIR'] = pyinstaller_directory
        result = True

    context.Result(result)
    return result


def find_pyinstaller():

    directories = os.listdir(os.curdir)

    for directory in directories:

        if os.path.isdir(directory) is False:
            continue

        if fnmatch.fnmatch(directory, 'pyinstaller-1.[56].[012]'):
            return directory

    return None


conf = Configure(env, custom_tests = {'CheckPyModule' : CheckPyModule,
                                      'CheckPyInstaller' : CheckPyInstaller})


def configure():

    global env

    if platform == 'win32':
        env['LIBPATH'] = ['C:\Panda3D-%s\lib' % panda_version, 'C:\Panda3D-%s\python\lib' % panda_version]

    elif platform == 'darwin':
        env['LIBPATH'] = ['/Developer/Panda3D/lib']

    else:
        env['LIBPATH'] = ['/usr/lib/panda3d']

    EnsurePythonVersion(2, 6)

    if not conf.CheckLib('p3pystub', language = 'C++'):

        print 'Could not find Panda3D Python stubs!'
        Exit(1)

    if not conf.CheckLib('pandaexpress', language = 'C++'):

        print 'Could not find Panda3D core!'
        Exit(1)

    if not conf.CheckLib('pandabullet', language = 'C++'):

        print 'Could not find Bullet binding for Panda3D!'
        Exit(1)

    if not conf.CheckLib('p3direct', language = 'C++'):

        print 'Could not find Panda3D Direct library!'
        Exit(1)

    if not conf.CheckPyModule('lupa'):

        print 'Could not find Lupa!'
        Exit(1)

    if not conf.CheckPyInstaller():

        print 'Could not find PyInstaller!'
        Exit(1)

    print 'Configuration finished successfully!'
    vars.Save('build-setup.conf', env)
    Exit(0)


def RecursiveGlob(startdir, pattern):

    files = Glob(startdir + pattern)

    if files:
        files += RecursiveGlob(startdir, '*/' + pattern)

    return files


Help("""
Type 'scons' to build OpenBlox.

Arguments:
    * PANDA_VERSION - specifies the version of Panda3D installed on your system (used only on Windows)
    * OS - specifies the OS to build for (optional; normally found automatically)
""" + vars.GenerateHelpText(env))

sphinx_builder_conv = {
'html' : '.html',
'text' : '.txt'
}

for node in RecursiveGlob(getsyspath('doc/source/'), '*.rst'):

    target = str(node).replace('.rst', sphinx_builder_conv[sphinx_builder]).replace(getsyspath('doc/source'), '/'.join([built_doc_dir, sphinx_builder]))
    builder = env.Sphinx(target, node)

    env.Alias('docs', builder)
    env.Alias(getsyspath('build/docs'), builder)
    Clean(builder, getsyspath('build/docs/'))


if 'configure' in COMMAND_LINE_TARGETS:

    configure()
    env.Ignore('configure', None)


Tool('distzip')(env)

env.Append(
    DISTZIP_EXCLUDEEXTS = ['.pyc']
)

docs_zip = env.DistZip(getsyspath('build/dist/docs/OpenBlox Documentation.zip'), env.Dir(getsyspath('build/docs')))
runtime_zip = env.DistZip(getsyspath('build/obruntime.zip'), env.Dir('obengine'))
env.Alias('distdoc', docs_zip)
env.Alias('runtime', runtime_zip)
Depends('distdoc', 'docs')
Clean(zip, getsyspath('build/dist/docs'))

env.Alias('test', env.Command('py.test', 'pytest.ini', pytest_cmd))
