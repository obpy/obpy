import os
import subprocess

def getsyspath(path):
    return path.replace('/', os.sep)

platform = ARGUMENTS.get('OS', Platform())
panda_version = ARGUMENTS.get('PANDA_VERSION', '1.7.2')
sphinx = ARGUMENTS.get('SPHINX', 'sphinx-build')
sphinx_flags = ARGUMENTS.get('SPHINX_FLAGS', '-Nq')
sphinx_builder = ARGUMENTS.get('SPHINX_BUILDER', 'html')
built_doc_dir = ARGUMENTS.get('BUILT_DOC_DIR', getsyspath('build/docs'))

sphinx_cmd = '%s %s -b %s %s %s $SOURCE' % (sphinx, sphinx_flags, sphinx_builder, getsyspath('doc/source'), '/'.join([built_doc_dir, sphinx_builder]))
sphinx = Builder(action = sphinx_cmd, src_suffix = '.rst', suffix = '.html')

pytest = ARGUMENTS.get('PY_TEST', 'py.test')
pytest_flags = ARGUMENTS.get('PY_TEST_FLAGS', '-q')
pytest_cmd = '%s %s' % (pytest, pytest_flags)

env = Environment()
conf = Configure(env)

env.Append(BUILDERS = {'Sphinx' : sphinx})

def configure():

    global env

    if platform == 'win32':
        env['LIBPATH'] = ['C:\Panda3D-%s\lib' % panda_version, 'C:\Panda3D-%s\python\lib' % panda_version]

    elif platform == 'darwin':
        env['LIBPATH'] = ['/Developer/Panda3D/lib']

    else:
        env['LIBPATH'] = ['/usr/lib/panda3d']

    EnsurePythonVersion(2, 6)

    if not conf.CheckLib('p3pystub', language = 'C++'):

        print 'Could not find Panda3D Python stub!'
        Exit(1)

    if not conf.CheckLib('panda', language = 'C++'):

        print 'Could not find Panda3D core!'
        Exit(1)

    if not conf.CheckLib('pandaode', language = 'C++'):

        print 'Could not find ODE binding for Panda3D!'
        Exit(1)

    if not conf.CheckLib('p3direct', language = 'C++'):

        print 'Could not find Panda3D Direct library!'
        Exit(1)

    env = conf.Finish()

Help("""
Type 'scons' to build OpenBlox.

Arguments:
    * PANDA_VERSION - specifies the version of Panda3D installed on your system (used only on Windows)
    * OS - specifies the OS to build for (optional; normally found automatically)
""")

for node in Glob(getsyspath('doc/source/*.rst')):

    target = str(node).replace('.rst', '.html').replace(getsyspath('doc/source'), '/'.join([built_doc_dir, sphinx_builder]))
    builder = env.Sphinx(target, node)

    env.Alias('docs', builder)
    env.Alias(getsyspath('build/docs'), builder)
    Clean(builder, getsyspath('build/docs/'))


if 'configure' in COMMAND_LINE_TARGETS:
    
    configure()
    Exit(0)

else:

    # Weird workaround for possible SCons bug
    Tool('distzip')(env)

env.Append(
    DISTZIP_EXCLUDEEXTS = ['.pyc']
)

docs_zip = env.DistZip(getsyspath('build/dist/docs/OpenBlox Documentation.zip'), env.Dir(getsyspath('build/docs')))
runtime_zip = env.DistZip(getsyspath('build/obruntime.zip'), env.Dir('obengine'))
env.Alias('distdoc', docs_zip)
env.Alias('runtime', runtime_zip)
Depends('distdoc', 'docs')
Clean(zip, getsyspath('build/dist/docs'))

env.Alias('test', env.Command('py.test', 'pytest.ini', pytest_cmd))
